-- | This module contains reexports of all the attributes.
-- This module has been automatically generated by running `spago run -p codegen`.
-- Any changes may be overwritten.
module Deku.DOM.MathML.Attributes
  ( module Combinators
  , encoding
  , encoding_
  , selection
  , selection_
  , actiontype
  , actiontype_
  , accentunder
  , accentunder_
  , accent
  , accent_
  , voffset
  , voffset_
  , lspace
  , lspace_
  , depth
  , depth_
  , height
  , height_
  , width
  , width_
  , linethickness
  , linethickness_
  , maxsize
  , maxsize_
  , minsize
  , minsize_
  , rspace
  , rspace_
  , movablelimits
  , movablelimits_
  , largeop
  , largeop_
  , symmetric
  , symmetric_
  , stretchy
  , stretchy_
  , form
  , form_
  , separator
  , separator_
  , fence
  , fence_
  , alttext
  , alttext_
  , display
  , display_
  ) where

import Control.Applicative (pure, class Applicative) as Applicative
import Control.Category ((<<<))
import Data.Functor (map, class Functor) as Functor
import Deku.DOM.Combinators (unset) as Combinators
import Deku.Attribute as Deku.Attribute

encoding
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (encoding :: String | r))
encoding = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "encoding")

encoding_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (encoding :: String | r))
encoding_ = encoding <<< Applicative.pure

selection
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (selection :: String | r))
selection = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "selection")

selection_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (selection :: String | r))
selection_ = selection <<< Applicative.pure

actiontype
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (actiontype :: String | r))
actiontype = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "actiontype")

actiontype_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (actiontype :: String | r))
actiontype_ = actiontype <<< Applicative.pure

accentunder
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (accentunder :: String | r))
accentunder = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "accentunder")

accentunder_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (accentunder :: String | r))
accentunder_ = accentunder <<< Applicative.pure

accent
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (accent :: String | r))
accent = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "accent")

accent_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (accent :: String | r))
accent_ = accent <<< Applicative.pure

voffset
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (voffset :: String | r))
voffset = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "voffset")

voffset_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (voffset :: String | r))
voffset_ = voffset <<< Applicative.pure

lspace
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (lspace :: String | r))
lspace = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "lspace")

lspace_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (lspace :: String | r))
lspace_ = lspace <<< Applicative.pure

depth
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (depth :: String | r))
depth = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "depth")

depth_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (depth :: String | r))
depth_ = depth <<< Applicative.pure

height
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (height :: String | r))
height = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "height")

height_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (height :: String | r))
height_ = height <<< Applicative.pure

width
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (width :: String | r))
width = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "width")

width_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (width :: String | r))
width_ = width <<< Applicative.pure

linethickness
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (linethickness :: String | r))
linethickness = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "linethickness")

linethickness_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (linethickness :: String | r))
linethickness_ = linethickness <<< Applicative.pure

maxsize
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (maxsize :: String | r))
maxsize = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "maxsize")

maxsize_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (maxsize :: String | r))
maxsize_ = maxsize <<< Applicative.pure

minsize
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (minsize :: String | r))
minsize = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "minsize")

minsize_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (minsize :: String | r))
minsize_ = minsize <<< Applicative.pure

rspace
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (rspace :: String | r))
rspace = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "rspace")

rspace_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (rspace :: String | r))
rspace_ = rspace <<< Applicative.pure

movablelimits
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (movablelimits :: String | r))
movablelimits = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "movablelimits")

movablelimits_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (movablelimits :: String | r))
movablelimits_ = movablelimits <<< Applicative.pure

largeop
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (largeop :: String | r))
largeop = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "largeop")

largeop_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (largeop :: String | r))
largeop_ = largeop <<< Applicative.pure

symmetric
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (symmetric :: String | r))
symmetric = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "symmetric")

symmetric_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (symmetric :: String | r))
symmetric_ = symmetric <<< Applicative.pure

stretchy
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (stretchy :: String | r))
stretchy = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "stretchy")

stretchy_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (stretchy :: String | r))
stretchy_ = stretchy <<< Applicative.pure

form
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (form :: String | r))
form = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "form")

form_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (form :: String | r))
form_ = form <<< Applicative.pure

separator
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (separator :: String | r))
separator = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "separator")

separator_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (separator :: String | r))
separator_ = separator <<< Applicative.pure

fence
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (fence :: String | r))
fence = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "fence")

fence_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (fence :: String | r))
fence_ = fence <<< Applicative.pure

alttext
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (alttext :: String | r))
alttext = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "alttext")

alttext_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (alttext :: String | r))
alttext_ = alttext <<< Applicative.pure

display
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (display :: String | r))
display = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "display")

display_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (display :: String | r))
display_ = display <<< Applicative.pure
